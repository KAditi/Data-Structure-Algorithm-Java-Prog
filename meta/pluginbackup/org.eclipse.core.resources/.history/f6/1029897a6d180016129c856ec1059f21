package com.example.tree.node;

public class BinaryTreeNode {
	
	private int data;
	private BinaryTreeNode right;
	private BinaryTreeNode left;
	BinaryTreeNode root;
	public BinaryTreeNode(int data)
	{
		this.data = data;
	}
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public BinaryTreeNode getRight() {
		return right;
	}
	public void setRight(BinaryTreeNode right) {
		this.right = right;
	}
	public BinaryTreeNode getLeft() {
		return left;
	}
	public void setLeft(BinaryTreeNode left) {
		this.left = left;
	}
	
	public void createTree(int data)
	{
		if(root == null)
		{
			root = new BinaryTreeNode(data);
		}
		else if(data < root.getData())
		{
			if(root.getLeft()!= null)
			{
					root.getLeft().createTree(data);
			}
			else
			{
				root.setLeft(new BinaryTreeNode(data));
			}
		}
		else
		{
			if(root.getRight()!= null)
			{
					root.getRight().createTree(data);
			}
			else
			{
				root.setRight(new BinaryTreeNode(data));
			}
			
		}
				
	}
	
	public void traverseInOrder()
	{
		if(root == null)
		{
			System.out.println("Root is null");
			return;
		}
		
		if(root.getLeft()!= null)
		{
			root.getLeft().traverseInOrder();
		}
			
		System.out.print("\t"+root.getData());
		
		if(root.getRight()!= null)
		{
			root.getRight().traverseInOrder();
		}
		
			
	}
	
	public static void main(String[] args) {
		
		BinaryTreeNode obj = new BinaryTreeNode(20);
		int[] nums = {15, 200, 25, -5, 0, 100, 20, 12, 126, 1000, -150};
		for(int i=0;i<nums.length;i++) {
			obj.createTree(nums[i]);		
		}
		obj.traverseInOrder();
	}
	
}
