package com.example.binary.tree.operations;

public class BTMethods {
	BinaryTreeNode root;
	
	public void addNode(int data)
	{
		BinaryTreeNode newNode = new BinaryTreeNode(data);
		
		if(root == null)
		{
			root = newNode;
		}
		else
		{
			BinaryTreeNode currNode = root;
			BinaryTreeNode parent;
			while(true)
			{
				parent = currNode;
				if(data < currNode.data)
				{
					currNode = currNode.left;
					if(currNode == null)
					{
						parent.left = newNode;
						return;
						
					}
				}
				else
				{
					currNode = currNode.right;
					if(currNode == null)
					{
						parent.right = newNode;
						return;
					}
				}
			}
		}
	}
	
	public void inOrderTraverse(BinaryTreeNode node)
	{
		if(node != null)
		{
			inOrderTraverse(node.left);
			System.out.print("\t"+node.data);
			inOrderTraverse(node.right);
		}
	}
	public void  preOrderTraversal(BinaryTreeNode node)
	{
		if(node!= null)
		{
			System.out.print("\t"+node.data);
			preOrderTraversal(node.left);
			preOrderTraversal(node.right);
		}
	}
	public void postOrderTraversal(BinaryTreeNode node)
	{
		if(node != null)
		{
			postOrderTraversal(node.left);
			postOrderTraversal(node.right);
			System.out.print("\t"+node.data);
		}
	}
	
	public static void main(String[] args){
		
		BTMethods object = new BTMethods();
		object.addNode(10);
		object.addNode(7);
		object.addNode(12);
		object.addNode(11);
		object.addNode(13);
		object.addNode(5);
		object.addNode(6);
		object.addNode(4);
		object.addNode(9);
		
		object.inOrderTraverse(object.root);
		object.preOrderTraversal(object.root);
		object.postOrderTraversal(object.root);
		
	}

}
